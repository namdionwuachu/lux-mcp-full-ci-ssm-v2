        rooms = str(stay_details.get("roomQuantity", 1))

        logger.info(f"Search params city={city_code} adults={adults} {check_in}â†’{check_out} rooms={rooms}")

        # ---- SDK path ----
        if HAVE_SDK and _amadeus_sdk_client:
            amadeus = _amadeus_sdk_client
            # Step 1: hotel IDs by city
            hotels_in_city = amadeus.reference_data.locations.hotels.by_city.get(cityCode=city_code)
            if not hotels_in_city.data:
                logger.info(f"No hotels found for city {city_code}")
                return []
            hotel_ids = [h.get("hotelId") for h in hotels_in_city.data if h.get("hotelId")]
            hotel_ids = hotel_ids[:20]  # simple cap
            if not hotel_ids:
                return []
            # Step 2: offers by hotelIds
            offers = amadeus.shopping.hotel_offers_search.get(
                hotelIds=",".join(hotel_ids),
                adults=adults,
                checkInDate=check_in,
                checkOutDate=check_out,
                currency=currency,
                roomQuantity=rooms,
                bestRateOnly=True,
            )
            data = offers.data or []
            logger            return data

        # ---- REST fallback ----
        # Step 1: /v1/reference-data/locations/hotels/by-city
        by_city = _rest_get(
            "/v1/reference-data/locations/hotels/by-city",
            {"cityCode": city_code},
        )
        hotels_list = by_city.get("data", [])
        hotel_ids = [h.get("hotelId") for h in hotels_list if h.get("hotelId")]
        hotel_ids = hotel_ids[:20]
        if not hotel_ids:
            logger.info(f"No hotels found for city {city_code} (REST)")
            return []

        # Step 2: /v3/shopping/hotel-offers
        offers = _rest_get(
            "/v3/shopping/hotel-offers",
            {
                "hotelIds": ",".join(hotel_ids),
                "adults": adults,
                "checkInDate": check_in,
                "checkOutDate": check_out,
                "currency": currency,
                "roomQuantity": rooms,
                "bestRateOnly": "true",
            },
        )
        data = offers.get("data", [])
        logger.info(f"Offers found (REST): {len(data)}")
        return data

    except ResponseError as e:
        logger.error(f"Amadeus SDK error: {e}")
        return []
    except Exception as e:
        logger.error(f"Unexpected error in search_hotels: {e}")
        return []

def _amadeus_search(search_data: Dict[str, Any]) -> List[Dict[str, Any]]:
    """Compatibility wrapper if other code imports this name."""
    return search_hotels(search_data)

def get_hotel_ratings(hotel_id: str) -> Dict[str, Any]:
    """Hotel sentiment/ratings (SDK if available, else REST)."""
    try:
        if HAVE_SDK and _amadeus_sdk_client:
            resp = _amadeus_sdk_client.e_reputation.hotel_sentiments.get(hotelIds=hotel_id)
            return resp.data or {}
        # REST fallback
        resp = _rest_get("/v2/e-reputation/hotel-sentiments", {"hotelIds": hotel_id})
        return resp.get("data", {})
    except Exception as e:
        logger.error(f"get_hotel_ratings failed for {hotel_id}: {e}")
        return {}

def search_activities(latitude: float, longitude: float) -> List[Dict[str, Any]]:
    """Activities near a lat/lon (SDK if available, else REST)."""
    try:
        if HAVE_SDK and _amadeus_sdk_client:
            resp = _amadeus_sdk_client.shopping.activities.get(latitude=latitude, longitude=longitude)
            return resp.data or []
        # REST fallback
        resp = _rest_get("/v1/shopping/activities", {"latitude": latitude, "longitude": longitude})
        return resp.get("data", [])
    except Exception as e:
        logger.error(f"search_activities failed: {e}")
        return []

